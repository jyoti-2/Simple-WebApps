You can put any valid JavaScript expression inside the curly braces in JSX
We split JSX over multiple lines for readability, and wrapping it in parentheses

You may use quotes to specify string literals as attributes:
const element = <div tabIndex="0"></div>;

 use curly braces to embed a JavaScript expression in an attribute:
const element = <img src={user.avatarUrl}></img>;

either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute

If a tag is empty, you may close it immediately with />
const element = <img src={user.avatarUrl} />;

By default, React DOM escapes any values embedded in JSX before rendering them.
Everything is converted to a string before being rendered. This helps prevent XSS (cross-site-scripting) attacks

Elements are the smallest building blocks of React apps.
Rendering Elements:
React elements are immutable. Once you create an element, you can’t change its children or attributes.
ex: const element = <h1> Hello </h1>;

Components let you split the UI into independent, reusable pieces,

components are like JavaScript functions. They accept arbitrary inputs (called “props” - properties) and return React elements describing what should appear on the screen.
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

Always start component names with a capital letter.
React treats components starting with lowercase letters as DOM tags. For example, <div /> represents an HTML div tag, but <Welcome /> represents a component and requires Welcome to be in scope.

All React components must act like pure functions with respect to their props.
 “pure” because they do not attempt to change their inputs, and always return the same result for the same inputs.

 State allows React components to change their output over time in response to user actions, network responses.

 





